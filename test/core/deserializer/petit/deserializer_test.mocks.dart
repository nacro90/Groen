// Mocks generated by Mockito 5.4.0 from annotations
// in groen/test/core/deserializer/petit/deserializer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:petitparser/src/context/context.dart' as _i4;
import 'package:petitparser/src/context/result.dart' as _i2;
import 'package:petitparser/src/core/parser.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<R> extends _i1.SmartFake implements _i2.Result<R> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeParser_1<R> extends _i1.SmartFake implements _i3.Parser<R> {
  _FakeParser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Parser].
///
/// See the documentation for Mockito's code generation for more information.
class MockParser<R> extends _i1.Mock implements _i3.Parser<R> {
  @override
  List<_i3.Parser<dynamic>> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i3.Parser<dynamic>>[],
        returnValueForMissingStub: <_i3.Parser<dynamic>>[],
      ) as List<_i3.Parser<dynamic>>);
  @override
  _i2.Result<R> parseOn(_i4.Context? context) => (super.noSuchMethod(
        Invocation.method(
          #parseOn,
          [context],
        ),
        returnValue: _FakeResult_0<R>(
          this,
          Invocation.method(
            #parseOn,
            [context],
          ),
        ),
        returnValueForMissingStub: _FakeResult_0<R>(
          this,
          Invocation.method(
            #parseOn,
            [context],
          ),
        ),
      ) as _i2.Result<R>);
  @override
  int fastParseOn(
    String? buffer,
    int? position,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fastParseOn,
          [
            buffer,
            position,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i2.Result<R> parse(String? input) => (super.noSuchMethod(
        Invocation.method(
          #parse,
          [input],
        ),
        returnValue: _FakeResult_0<R>(
          this,
          Invocation.method(
            #parse,
            [input],
          ),
        ),
        returnValueForMissingStub: _FakeResult_0<R>(
          this,
          Invocation.method(
            #parse,
            [input],
          ),
        ),
      ) as _i2.Result<R>);
  @override
  _i3.Parser<R> copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeParser_1<R>(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeParser_1<R>(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i3.Parser<R>);
  @override
  bool isEqualTo(
    _i3.Parser<dynamic>? other, [
    Set<_i3.Parser<dynamic>>? seen,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEqualTo,
          [
            other,
            seen,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool hasEqualProperties(_i3.Parser<dynamic>? other) => (super.noSuchMethod(
        Invocation.method(
          #hasEqualProperties,
          [other],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool hasEqualChildren(
    _i3.Parser<dynamic>? other,
    Set<_i3.Parser<dynamic>>? seen,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasEqualChildren,
          [
            other,
            seen,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void replace(
    _i3.Parser<dynamic>? source,
    _i3.Parser<dynamic>? target,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replace,
          [
            source,
            target,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  T captureResultGeneric<T>(T Function<R>(_i3.Parser<R>)? callback) =>
      throw UnsupportedError(
          r'"captureResultGeneric" cannot be used without a mockito fallback generator.');
}
